=> header.js : 
const Header = ({ onNewNoteClick }) => (
  <header className="header">
    <h1>My Notes</h1>
    <NewNoteButton onClick={onNewNoteClick} /> {/* New Note button here */}
  </header>
);


=> NewNoteButton.js:
const NewNoteButton = ({ onClick }) => {
    return (
      <button onClick={onClick} className="new-note-button">
        New Note
      </button>
    );
  };
 
=> NewNoteForm.js : 
const NewNoteForm = ({ onSave }) => {
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');
  
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave({ title, content });
      setTitle('');
      setContent('');
    };
  
    return (
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          placeholder="Note title"
          required
        />
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
          placeholder="Note content"
          required
        />
        <button type="submit">Save Note</button>
      </form>
    );
  };

=> NoteItem.js:

const NoteItem = ({ note, deleteNote }) => {
  const navigate = useNavigate();
  
  // Format date and time
  const formattedDate = new Date(note.date).toLocaleDateString('en-US', {
    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'
  });
  const formattedTime = new Date(note.date).toLocaleTimeString('en-US', {
    hour: '2-digit', minute: '2-digit'
  });

  // Navigate to edit page
  const handleEdit = () => {
    navigate(`/edit/${note.id}`);
  };

  return (
    <div className="note-item">
      <div className="note-header">
        <h2>{note.title}</h2>
        <div className="note-actions">
          <FaPencilAlt className="icon edit-icon" onClick={handleEdit} />
          <FaTrash className="icon delete-icon" onClick={() => deleteNote(note.id)} />
        </div>
      </div>
      <p>{note.content.substring(0, 100)}...</p> {/* Show first few lines of content */}
      <div className="note-footer">
        <span>{formattedDate}</span>
        <span>{formattedTime}</span>
      </div>
    </div>
  );
};


=> NoteList.js : 
const NoteList = ({ notes, editNote, deleteNote }) => {
    return (
      <div className="note-list">
        {notes.map(note => (
          <NoteItem 
            key={note.id} 
            note={note} 
            editNote={editNote} 
            deleteNote={deleteNote} 
          />
        ))}
      </div>
    );
};
=> SearchBar.js:

const SearchBar = ({ searchQuery, handleSearch }) => (
    <input
      type="text"
      placeholder="Search notes..."
      value={searchQuery}
      onChange={handleSearch}
    />
  );

=> EditNotePage.js:

const EditNotePage = ({ notes, editNote }) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const note = notes.find(note => note.id === parseInt(id, 10));

  const [title, setTitle] = useState(note ? note.title : '');
  const [content, setContent] = useState(note ? note.content : '');

  const handleSave = () => {
    if (title.trim() && content.trim()) {
      editNote(note.id, { title, content });
      navigate('/');
    } else {
      alert('Title and content cannot be empty!');
    }
  };

  const handleCancel = () => {
    navigate('/');
  };

  return (
    <div className="edit-note-page">
      <div className="edit-note-header">
        <h1>Edit Note</h1>
      </div>
      <div className="note-container">
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          placeholder="Enter note title"
          className="note-title-input"
        />
        <ReactQuill
          value={content}
          onChange={setContent}
          className="note-content-editor"
          theme="snow"
        />
      </div>
      <div className="button-group">
        <button onClick={handleSave} className="save-button">Save</button>
        <button onClick={handleCancel} className="cancel-button">Cancel</button>
      </div>
    </div>
  );
};

  
=> app.js:

const AppContent = () => {
  const [notes, setNotes] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const location = useLocation(); // Moved inside the Router context

  const addNote = (note) => {
    setNotes([...notes, { ...note, id: Date.now(), date: new Date() }]);
  };

  const editNote = (id, updatedNote) => {
    setNotes(notes.map(note => note.id === id ? { ...note, ...updatedNote } : note));
  };

  const deleteNote = (id) => {
    setNotes(notes.filter(note => note.id !== id));
  };

  const handleSearch = (event) => {
    setSearchQuery(event.target.value);
  };

  const filteredNotes = notes.filter(note => 
    note.title.toLowerCase().includes(searchQuery.toLowerCase()) || 
    note.content.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="app">
      {/* Conditionally show Header and SearchBar only on the main page */}
      {location.pathname === '/' && (
        <>
          <Header onNewNoteClick={() => addNote({ title: "New Note", content: "Note content" })} />
          <SearchBar searchQuery={searchQuery} handleSearch={handleSearch} />
        </>
      )}
      
      <Routes>
        <Route 
          path="/" 
          element={<NoteList notes={filteredNotes} editNote={editNote} deleteNote={deleteNote} />} 
        />
        <Route 
          path="/edit/:id" 
          element={<EditNotePage notes={notes} editNote={editNote} />} 
        />
      </Routes>
    </div>
  );
};

const App = () => {
  return (
    <Router>
      <AppContent /> {/* App logic inside Router */}
    </Router>
  );
};

=> above is the code app structure of my react app.