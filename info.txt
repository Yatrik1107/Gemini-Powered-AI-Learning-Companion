=> header.js : 
const Header = ({ onNewNoteClick }) => (
  <header className="header">
    <h1>My Notes</h1>
    <NewNoteButton onClick={onNewNoteClick} /> {/* New Note button here */}
  </header>
);


=> NewNoteButton.js:
const NewNoteButton = ({ onClick }) => {
    return (
      <button onClick={onClick} className="new-note-button">
        New Note
      </button>
    );
  };
 
=> NewNoteForm.js : 
const NewNoteForm = ({ onSave }) => {
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');
  
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave({ title, content });
      setTitle('');
      setContent('');
    };
  
    return (
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          placeholder="Note title"
          required
        />
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
          placeholder="Note content"
          required
        />
        <button type="submit">Save Note</button>
      </form>
    );
  };

=> NoteItem.js:

const NoteItem = ({ note, editNote, deleteNote }) => {
    const handleEdit = () => {
      const updatedContent = prompt("Edit your note", note.content);
      if (updatedContent) {
        editNote(note.id, { content: updatedContent });
      }
    };
  
    return (
      <div className="note-item">
        <h2>{note.title}</h2>
        <p>{note.content}</p>
        <button onClick={handleEdit}>Edit</button>
        <button onClick={() => deleteNote(note.id)}>Delete</button>
      </div>
    );
};
=> NoteList.js : 
const NoteList = ({ notes, editNote, deleteNote }) => {
    return (
      <div className="note-list">
        {notes.map(note => (
          <NoteItem 
            key={note.id} 
            note={note} 
            editNote={editNote} 
            deleteNote={deleteNote} 
          />
        ))}
      </div>
    );
};
=> SearchBar.js:

const SearchBar = ({ searchQuery, handleSearch }) => (
    <input
      type="text"
      placeholder="Search notes..."
      value={searchQuery}
      onChange={handleSearch}
    />
  );

  
=> app.js:

const App = () => {
  const [notes, setNotes] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');

  const addNote = (note) => {
    setNotes([...notes, { ...note, id: Date.now() }]);
  };

  const editNote = (id, updatedNote) => {
    setNotes(notes.map(note => note.id === id ? { ...note, ...updatedNote } : note));
  };

  const deleteNote = (id) => {
    setNotes(notes.filter(note => note.id !== id));
  };

  const handleSearch = (event) => {
    setSearchQuery(event.target.value);
  };

  const filteredNotes = notes.filter(note => 
    note.title.toLowerCase().includes(searchQuery.toLowerCase()) || 
    note.content.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="app">
      <Header onNewNoteClick={() => addNote({ title: "New Note", content: "Note content" })} />
      <SearchBar searchQuery={searchQuery} handleSearch={handleSearch} />
      <div className="notes-container">
        <NoteList notes={filteredNotes} editNote={editNote} deleteNote={deleteNote} />
      </div>
    </div>
  );
};


